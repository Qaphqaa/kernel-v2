{"version":3,"sources":["webpack://kernel-community/./content/en/learn/module-1/understanding-ethereum.mdx"],"names":["_frontmatter","makeShortcode","name","props","console","warn","Video","Process","Flash","Card","List","Link","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","src","to","isMDXComponent"],"mappings":"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","file":"component---content-en-learn-module-1-understanding-ethereum-mdx-a564b977a8ee6bc22b81.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/kernel-v2/kernel-v2/src/modules/layouts/default_layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Video = makeShortcode(\"Video\");\nconst Process = makeShortcode(\"Process\");\nconst Flash = makeShortcode(\"Flash\");\nconst Card = makeShortcode(\"Card\");\nconst List = makeShortcode(\"List\");\nconst Link = makeShortcode(\"Link\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"-the-idea\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`ðŸ’¡ The idea`}<a parentName=\"h1\" {...{\n        \"href\": \"#-the-idea\",\n        \"aria-label\": \" the idea permalink\",\n        \"className\": \"anchor-link after\"\n      }}><span parentName=\"a\">{`Â¶`}</span></a></h1>\n    <p>{`We now have some context for what verifiability is, where it comes from and the unique role it plays in securing our trade, and therefore trust, relationships. Critically, Szabo has made it clear how this self-same verifiability is the means by which we can understand the network within which trade (and trust) operate. Knowing this, we can turn to the founder of Ethereum - Vitalik Buterin - without making the mistake of thinking that he is talking about something new.`}</p>\n    <p>{`Ethereum is a very old idea, dressed up in new clothes and a network that operates by virtue of encoded light, rather than clay seals.`}</p>\n    <Video src=\"https://www.youtube-nocookie.com/embed/gjwr-7PgpN8\" mdxType=\"Video\" />\n    <h2 {...{\n      \"id\": \"how-does-this-fit-into-kernel\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`How does this fit into Kernel?`}<a parentName=\"h2\" {...{\n        \"href\": \"#how-does-this-fit-into-kernel\",\n        \"aria-label\": \"how does this fit into kernel permalink\",\n        \"className\": \"anchor-link after\"\n      }}><span parentName=\"a\">{`Â¶`}</span></a></h2>\n    <p>{`This early video from Devcon 1 contains many gems of insight into the ideas behind Ethereum; why it might be interesting and important to have one, shared, Turing-complete environment which anyone can access and program; and what the vision was (and is). It's especially useful to look back and ask what of the original ideas we have succeeded in implementing, and where there are still opportunities for improvement. This video has been selected to assist you deepen your (more technical) understanding of:`}</p>\n    <Process mdxType=\"Process\">\n      <p>{`Value`}</p>\n      <p>{`Trust`}</p>\n      <p>{`Incentives`}</p>\n      <p>{`Censorship resistance`}</p>\n      <p>{`(Not just!) money and speech`}</p>\n    </Process>\n    <h2 {...{\n      \"id\": \"brief\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`Brief`}<a parentName=\"h2\" {...{\n        \"href\": \"#brief\",\n        \"aria-label\": \"brief permalink\",\n        \"className\": \"anchor-link after\"\n      }}><span parentName=\"a\">{`Â¶`}</span></a></h2>\n    <p>{`This video is the genesis of the calculator (Bitcoin) vs smartphone (Ethereum) analogy and a\ndemonstration of the power of generality...`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`\"Instead of having a protocol that is designed around one very small set of use cases, you\njust create a `}<strong parentName=\"p\">{`general-purpose operating system`}</strong>{` and you let people build whatever they want\nas applications on top of it.\"`}</p>\n    </blockquote>\n    <p>{`Ethereum is a blockchain with a few unique features:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Built-in Turing-complete scripting language - essentially a hybrid between standard VM\narchitectures, Bitcoin script and a \"few other things\".`}</li>\n      <li parentName=\"ul\">{`People can write programs in this script, or high level languages that compile down to this\nscript, take these compiled scripts, put them into transactions and send them to the blockchain.\nThe transaction gets confirmed and you get a special account at that address.`}</li>\n      <li parentName=\"ul\">{`Contractual accounts and Externally Owned Accounts have the `}<strong parentName=\"li\">{`same privileges`}</strong>{`.`}</li>\n      <li parentName=\"ul\">{`Anyone can create an application, with any rules. Anyone can then interact with that\napplication, i.e. you can do NameCoin in 10 lines of code...`}</li>\n    </ul>\n    <p>{`State is defined as a key value mapping addresses to account objects. Every account object has a\nnonce and balance. Contract accounts also include a code hash and storage trie root. Vitalik\nthen discusses how transactions work - important low-level details for us to build a full\nconceptual picture in the weeks ahead.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`\"You can actually think of it as being a fairly simple system. You can think of the state as\nbeing a database, and you can think of each of these contracts as being programs that are\nsitting on one computer, `}<strong parentName=\"p\">{`except the computer is massively globally distributed. It's actually\na highly secure network backed by tens of thousands computers around the world.`}</strong>{` It's bold\nbecause it's important.\"`}</p>\n    </blockquote>\n    <p>{`However, this raises the spectre of \"The Halting Problem\". If you have a general scripting language, then what is to stop someone writing a program which does not terminate (or halt), taking up all the computer's resources and preventing anyone else from using it? Vitalik explains how this is solved by \"gas\": a fee charged for every computational step the computer must take, where there is a limit to computational steps possible per block.`}</p>\n    <Flash mdxType=\"Flash\">\n      <Card mdxType=\"Card\">\n        <p>{`Q: Ethereum's state is defined as a...?`}</p>\n        <p>{`A: key value mapping addresses to account objects.`}</p>\n      </Card>\n    </Flash>\n    <h3 {...{\n      \"id\": \"virtual-economy\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`Virtual Economy`}<a parentName=\"h3\" {...{\n        \"href\": \"#virtual-economy\",\n        \"aria-label\": \"virtual economy permalink\",\n        \"className\": \"anchor-link after\"\n      }}><span parentName=\"a\">{`Â¶`}</span></a></h3>\n    <p>{`This means there is no `}<em parentName=\"p\">{`technical`}</em>{` limit on what can be put in the `}<inlineCode parentName=\"p\">{`data`}</inlineCode>{` field of a\ntransaction, but there is an `}<em parentName=\"p\">{`economic`}</em>{` one, as the more data you include, the more expensive\nit becomes. It was an extra 68 gas for every byte of data you include at that time, though it\nmay have changed now. `}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`ðŸ’¡ Exercise for the reader: how would you tell what the gas price per byte currently is?`}</p>\n    </blockquote>\n    <p>{`Vitalik then discusses some of the intricacies around `}<inlineCode parentName=\"p\">{`v`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`r`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`s`}</inlineCode>{` from elliptic curve\ncryptography, and how `}<inlineCode parentName=\"p\">{`v`}</inlineCode>{` is an extra field used for public key recovery. He also provides\nfurther information on receipts and logs and why logs are cheaper and allow for efficient\nlight-client access. Although it may sound boring, this is the heart of how we build\ncensorship-resistant tools.`}</p>\n    <Flash mdxType=\"Flash\">\n      <Card mdxType=\"Card\">\n        <p>{`Q: How do we prevent a blockchain with a Turing-complete script from halting?`}</p>\n        <p>{`A: By charging \"gas\" for every computational step and limiting the amount of gas consumed per block.`}</p>\n      </Card>\n    </Flash>\n    <p>{`This is followed by a description of the `}<strong parentName=\"p\">{`Ethereum Virtual Machine`}</strong>{`:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Stack - up to 1024 32-byte fields.`}</li>\n      <li parentName=\"ul\">{`Memory - just an infinitely expanding byte array, but the more you expand the byte array,\nthe more gas you have to pay. `}<strong parentName=\"li\">{`Most of the limits aren't static, they're economic and you'll\nsee this idea again and again.`}</strong></li>\n      <li parentName=\"ul\">{`Storage - permanent for contracts. You can read and write to it.`}</li>\n      <li parentName=\"ul\">{`Environment variables - the VM can access block number, time, mining difficulty, previous block\nhash etc.`}</li>\n      <li parentName=\"ul\">{`Logs - append-only storage in a specific block, not in state.`}</li>\n      <li parentName=\"ul\">{`Sub-calling - opcodes by which VM can itself call other contracts.`}</li>\n    </ul>\n    <p>{`Vitalik then discusses ABI (application binary interface) and RLP (recursive length prefix) encoding \"for people who are set theory geeks\". It may seem boring, but it is a demonstration of the early culture and how the people who built all this stuff really think. He follows this with an explanation of memory-hard algorithms for mining and why they were an innovation; emphasises the fast block time (17s); and discusses \"uncles\", which solve the stale rates of blocks that arise due to network latency. It's worth listening to for cultural context, but 23:50 - 28:57 is now a bit outdated.`}</p>\n    <p>{`Vitalik makes the critical point that merkle tries are \"a construction that allows for compact, efficiently-verifiable proofs that a particular transaction was included in a particular block.\" It's not just transactions in the Merkle trie though; it's the state too: i.e. that storage trie root we talked about in the account object earlier.`}</p>\n    <p>{`Understanding how this particular choice of data structure allows us to succinctly express shared state reveals why intimacy with low-level technical details allows one to build a comprehensive conceptual picture of how it all ties together, and what meanings any technology can be used to build.`}</p>\n    <p>{`What kinds of meaning exactly? Well, `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.goodreads.com/book/show/5755.The_Language_Instinct\"\n      }}>{`language itself is composed out of tree-like deep structures`}</a>{`. It is these basic, but extraordinarily powerful, combinatorial patterns which allow very young human beings to learn and use an almost infinitely complex phenomenon with such ease, even as their brains are still developing. `}</p>\n    <p>{`More prosaically, every word is a tree, with its roots tracing through endless other words and languages and people, and its branches reaching into any number of unique interpretations in times and contexts yet to be discovered. Language is the only `}<a parentName=\"p\" {...{\n        \"href\": \"https://medium.com/@VitalikButerin/the-meaning-of-decentralization-a0c92b76a274\"\n      }}>{`logically decentralized`}</a>{` system we have, so it makes sense that the data structures which inform the next logically decentralized systems we co-create mirror that at the heart of how we currently communicate value.`}</p>\n    <h3 {...{\n      \"id\": \"generalised-compute\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`Generalised Compute`}<a parentName=\"h3\" {...{\n        \"href\": \"#generalised-compute\",\n        \"aria-label\": \"generalised compute permalink\",\n        \"className\": \"anchor-link after\"\n      }}><span parentName=\"a\">{`Â¶`}</span></a></h3>\n    <p>{`So, you're less technical than Vitalik (i.e. all of us) and are wondering what this all really means? Well, the critical point is this notion of a `}<strong parentName=\"p\">{`general purpose operating system`}</strong>{` - one, monolithic virtual machine distributed across the world which is shared by everyone, owned by no-one and which can't be turned off without also turning off the internet. With Bitcoin, you can carry 12 magical words in your head across any border in the world, incant them into an internet-connected machine and have immediate access to value. `}</p>\n    <p>{`Now, there is the possibility that you could pull down not just monetary value, but `}<em parentName=\"p\">{`generalised computation`}</em>{`. That is, your 12 or 24-word mnemonic could be your entire personal OS, which would be accessible from anywhere. Stop thinking of computers as a screen into which you type things from a keyboard. Start seeing the world itself as an infinitely programmable playground, access to which only requires a few magical words anyone, anywhere can create when they learn the basics of a new order of language.`}</p>\n    <Flash mdxType=\"Flash\">\n      <Card mdxType=\"Card\">\n        <p>{`Q: The 12 or 24 words used to generate your private key and grant you access to a blockchain is called a `}{`_`}{`_`}{`_`}{`_`}{`_`}{`_`}{`_`}{`_`}{`?`}</p>\n        <p>{`A: Mnemonic.`}</p>\n      </Card>\n    </Flash>\n    <h3 {...{\n      \"id\": \"kaizen-and-the-principle-of-subtraction\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`Kaizen and The Principle of Subtraction`}<a parentName=\"h3\" {...{\n        \"href\": \"#kaizen-and-the-principle-of-subtraction\",\n        \"aria-label\": \"kaizen and the principle of subtraction permalink\",\n        \"className\": \"anchor-link after\"\n      }}><span parentName=\"a\">{`Â¶`}</span></a></h3>\n    <p>{`It's also worth understanding the `}<a parentName=\"p\" {...{\n        \"href\": \"https://ethereum.foundation/philosophy/\"\n      }}>{`Ethereum Foundation's philosophy`}</a>{`, as it works with two fascinating complementary opposites. `}</p>\n    <List mdxType=\"List\">\n      <Link to=\"https://youtu.be/R7FjX0GEiAM?t=110\" mdxType=\"Link\">\nThe Quintessential DevCon IV Talk\n      </Link>\n    </List>\n    <p>{`The term æ”¹å–„ (pronounced \"kaizen\", meaning \"continuous improvement\") was first used in Japan after World War II, mostly promoted by American business and quality-management teachers, and found its apogee in \"The Toyota Way\". So it's not a term with a great history, but it is one we can reclaim by pairing it with its opposite, what Aya Miyaguchi calls \"The Principle of Subtraction\".`}</p>\n    <p>{`Rooted in Zen philosophy, the Ethereum Foundation aims to \"grow small\"; to do by not doing; and to try and matter less. When consistently subtracting from your own importance and influence, then the continuous improvement we all wish to see happens in the community's capacity and capability. It's elegant and simple.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`We seek to continuously improve the people around us by humbling ourselves and handing over power at every chance, without shirking responsibility.`}</p>\n    </blockquote>\n    <p>{`Delighted, we gradually find ourselves doing nothing, being happy.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}